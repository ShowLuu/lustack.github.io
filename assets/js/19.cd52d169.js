(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{333:function(e,t,a){"use strict";a.r(t);var r=a(14),n=Object(r.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"重学设计模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重学设计模式"}},[e._v("#")]),e._v(" 重学设计模式")]),e._v(" "),t("h2",{attrs:{id:"参考"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[e._v("#")]),e._v(" 参考")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://gitee.com/ShowLuu/JavaBase/tree/master/src/main/java/design",target:"_blank",rel:"noopener noreferrer"}},[e._v("Lu多年总结&实践"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("a",{attrs:{href:"https://space.bilibili.com/15637440",target:"_blank",rel:"noopener noreferrer"}},[e._v("小傅哥の码场"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("a",{attrs:{href:"https://bugstack.cn/md/develop/design-pattern/2022-03-12-%E9%87%8D%E5%AD%A6Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FB%E7%AB%99%E8%A7%86%E9%A2%91.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("小傅哥博客"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("a",{attrs:{href:"https://gitee.com/fustack/CodeDesignTutorials",target:"_blank",rel:"noopener noreferrer"}},[e._v("小傅哥案例源码"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("a",{attrs:{name:"d7b229c4"}})]),e._v(" "),t("h2",{attrs:{id:"创建型模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建型模式"}},[e._v("#")]),e._v(" 创建型模式")]),e._v(" "),t("ul",[t("li",[e._v("工厂、抽象工厂、建造者、原型、单例")])]),e._v(" "),t("p",[t("a",{attrs:{name:"f203704d"}})]),e._v(" "),t("h2",{attrs:{id:"结构型模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#结构型模式"}},[e._v("#")]),e._v(" 结构型模式")]),e._v(" "),t("ul",[t("li",[e._v("适配器模式\n"),t("ul",[t("li",[e._v("前后端统一的返回参数处理")]),e._v(" "),t("li",[e._v("将上层不同的数据结构，通过适配器，转换成统一的数据结构")])])]),e._v(" "),t("li",[e._v("桥接模式\n"),t("ul",[t("li",[e._v("聚合平台、资源整合，例如"),t("a",{attrs:{href:"https://gitee.com/ShowLuu/JavaBase/blob/master/src/main/java/design/pattern/Lu23BridgePattern/BridgePattern03.java",target:"_blank",rel:"noopener noreferrer"}},[e._v("聚合支付平台"),t("OutboundLink")],1),e._v("(支付渠道+支付方式实现)")]),e._v(" "),t("li",[e._v("将抽象与实现分离，通过"),t("strong",[e._v("桥")]),e._v("产生联系")])])]),e._v(" "),t("li",[e._v("组合模式\n"),t("ul",[t("li",[t("a",{attrs:{href:"https://gitee.com/ShowLuu/JavaBase/blob/master/src/main/java/design/pattern/Lu15CompositePattern/CompositePattern05.java",target:"_blank",rel:"noopener noreferrer"}},[e._v("决策树"),t("OutboundLink")],1),e._v("、规则引擎")]),e._v(" "),t("li",[e._v("将服务各个节点自由组合对外提供服务 (组合成一组可以被调用的结构树)")])])]),e._v(" "),t("li",[e._v("装饰器模式\n"),t("ul",[t("li",[e._v("在原有逻辑不变的情况下，对对象的增强")])])]),e._v(" "),t("li",[e._v("门面模式\n"),t("ul",[t("li",[e._v("接口白名单")]),e._v(" "),t("li",[e._v("屏蔽复杂的实现，封装成职责单一且简单的方法，对外提供服务")])])]),e._v(" "),t("li",[e._v("享元模式\n"),t("ul",[t("li",[e._v("秒杀场景的优化：多几缓存架构，缓解db系统单点问题")]),e._v(" "),t("li",[e._v("以解决程序性能为主，减少对象的创建数量，共享通用对象，减少内存的使用，提升系统的访问效率，例如：共享数据")])])]),e._v(" "),t("li",[e._v("代理模式\n"),t("ul",[t("li",[e._v("spring aop编程、mybatis")]),e._v(" "),t("li",[e._v("包装执行过程，可以对原有的接口包装增强，也可以是拦截等")])])])]),e._v(" "),t("p",[t("a",{attrs:{name:"0df886f3"}})]),e._v(" "),t("h2",{attrs:{id:"行为型模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#行为型模式"}},[e._v("#")]),e._v(" 行为型模式")]),e._v(" "),t("ul",[t("li",[e._v("责任链模式\n"),t("ul",[t("li",[t("a",{attrs:{href:"https://gitee.com/ShowLuu/JavaBase/blob/master/src/main/java/design/pattern/Lu10ChainResponsibilityPattern/ChainResponsibilityPattern03.java",target:"_blank",rel:"noopener noreferrer"}},[e._v("审批流程"),t("OutboundLink")],1),e._v("，拦截链过滤链")]),e._v(" "),t("li",[e._v("避免一个请求，被多个处理者接收处理（这样耦合性太强），采用这一模式，将所有的请求处理者，通过前一个处理者记住下一个处理者(引用)的方式，将所有的处理者，按照优先级连成一条链，直到各个处理者处理返回，或者链路走完为止。层层递进。")])])]),e._v(" "),t("li",[e._v("命令模式\n"),t("ul",[t("li",[t("a",{attrs:{href:"https://gitee.com/ShowLuu/JavaBase/blob/master/src/main/java/design/pattern/Lu09CommandPattern/Lu09CommandPattern03.java",target:"_blank",rel:"noopener noreferrer"}},[e._v("计算器"),t("OutboundLink")],1),e._v("、项目经理协调资源开展工作、"),t("code",[e._v("JdbcTemplate StatementCallback")])]),e._v(" "),t("li",[e._v("将抽象的命令与命令背后具体的实现相分离，通过调度者去协调，完成一件事情。")])])]),e._v(" "),t("li",[e._v("迭代器模式\n"),t("ul",[t("li",[e._v("java迭代器实现、遍历组织架构树、遍历决策树...")]),e._v(" "),t("li",[e._v("以相同的调用方式，遍历不同的数据结构(list、map、树...)，切合一些算法，按照不同的规则遍历，而上层调用不管关系遍历逻辑的具体实现")])])]),e._v(" "),t("li",[e._v("中介者模式\n"),t("ul",[t("li",[t("code",[e._v("Mysql、oracle、sqlserver => orm => 应用层")]),e._v("这里mybatis 等orm框架就是联系数据库与应用层的中介，其中可以做一些重复的复杂的事情")]),e._v(" "),t("li",[e._v("中台系统也是一个中介，将底层复杂子系统的功能统一包装，提供外部接口能力")])])]),e._v(" "),t("li",[e._v("备忘录模式\n"),t("ul",[t("li",[t("a",{attrs:{href:"https://gitee.com/ShowLuu/JavaBase/blob/master/src/main/java/design/pattern/Lu18MementoPattern/MementoPattern06.java",target:"_blank",rel:"noopener noreferrer"}},[e._v("版本记录(回滚撤销恢复...)"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("在不破环原有对象的基础上，记录对象每次更新的状态，以便版本控制")])])]),e._v(" "),t("li",[e._v("观察者模式\n"),t("ul",[t("li",[e._v("消息订阅系统、"),t("a",{attrs:{href:"https://gitee.com/ShowLuu/JavaBase/blob/master/src/main/java/design/pattern/Lu16ObserverPattern/ObserverPattern05.java",target:"_blank",rel:"noopener noreferrer"}},[e._v("jvm提供的观察者机制"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("当一个行为发生时，将该事件，传递给关注他的用户，事件驱动。")])])]),e._v(" "),t("li",[e._v("状态模式\n"),t("ul",[t("li",[t("a",{attrs:{href:"https://gitee.com/fustack/CodeDesignTutorials/tree/main/tutorials-22.0-2",target:"_blank",rel:"noopener noreferrer"}},[e._v("活动的审批过程"),t("OutboundLink")],1),e._v(" "),t("ul",[t("li",[e._v("活动过程：查看 -> 编辑 -> 提审 -> 撤审 -> 通过 -> 拒绝 -> 关闭 -> 开启")]),e._v(" "),t("li",[e._v("活动审批这个过程，提审阶段：提交申请单，下个状态要么是通过，要么是拒绝，不能直接关闭，而且待审核状态也不能重复提审")])])]),e._v(" "),t("li",[t("a",{attrs:{href:"https://gitee.com/ShowLuu/JavaBase/blob/master/src/main/java/design/pattern/Lu20StatePattern/StatePattern01.java",target:"_blank",rel:"noopener noreferrer"}},[e._v("电梯运行过程"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("磁带放音机\n"),t("ul",[t("li",[e._v("按不同的安装，放音机的有不同的状态变化，例如：下一首、快进、声音变大，但是有些按钮不能同时按，例如同时按快进和快退。")])])]),e._v(" "),t("li",[e._v("一个行为下，多种状态的变更，不同的行为，所支持的状态表更不同")])])]),e._v(" "),t("li",[e._v("策略模式\n"),t("ul",[t("li",[t("a",{attrs:{href:"https://gitee.com/ShowLuu/JavaBase/blob/master/src/main/java/design/pattern/Lu12StrategyPattern/StrategyPattern03.java",target:"_blank",rel:"noopener noreferrer"}},[e._v("优惠折扣发放(满减、直减、折扣、n元购)"),t("OutboundLink")],1),e._v("、发送消息(短信、彩信、邮件)、支付方式(密码支付、指纹支付、人脸识别)")]),e._v(" "),t("li",[e._v("可以替换大量的ifelse，一个行为产生了，选择什么样的策略去应对，将各个应对策略的实现分离开来，至于调度问题，可以采用map k v的形式或者反射的形式处理")])])]),e._v(" "),t("li",[e._v("模版模式\n"),t("ul",[t("li",[t("a",{attrs:{href:"https://gitee.com/ShowLuu/JavaBase/blob/master/src/main/java/design/pattern/Lu04TemplatePattern/StrategyPattern01.java",target:"_blank",rel:"noopener noreferrer"}},[e._v("分布式事务实现(2PC)"),t("OutboundLink")],1),e._v(" "),t("ul",[t("li",[e._v("一阶段执行各个本地事务逻辑，二阶段，当所有本地事务都提交成功，则方法返回成功；当存在失败，则回滚已经成功的本地事务。这就可以构造成一个调度模版。")])])]),e._v(" "),t("li",[e._v("将一类方法通用的调度模式提取出来形成一个模版，模版里调用各个子方法的具体实现（类似于一个，调度模版）")])])]),e._v(" "),t("li",[e._v("访问者模式\n"),t("ul",[t("li",[t("a",{attrs:{href:"https://gitee.com/ShowLuu/JavaBase/blob/master/src/main/java/design/pattern/Lu19VisitorPattern/VisitorPattern05.java",target:"_blank",rel:"noopener noreferrer"}},[e._v("数据报表"),t("OutboundLink")],1),e._v("、大数据等场景")]),e._v(" "),t("li",[e._v("在一个稳定的数据结构下，通过聚合、转换、数据清洗等，增加易变的访问逻辑")])])])])])}),[],!1,null,null,null);t.default=n.exports}}]);